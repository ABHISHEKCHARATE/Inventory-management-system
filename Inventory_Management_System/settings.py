# """
# Django settings for Inventory_Management_System project.

# Generated by 'django-admin startproject' using Django 4.2.18.

# For more information on this file, see
# https://docs.djangoproject.com/en/4.2/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/4.2/ref/settings/
# """

# from pathlib import Path

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent


# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-y-qf4s*g(0lbprj-hp(&jr!^-(3vr697mr=xe6bvu=av&_gb+n'

# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# ALLOWED_HOSTS = []

# import os

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_USE_TLS = True
# EMAIL_PORT = 587


# # EMAIL_HOST_USER = 'charateabhishek3@gmail.com'
# # EMAIL_HOST_PASSWORD = 'AbhiCharate_123'


# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'charateabhishek3@gmail.com') 
# # EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'AbhiCharate_123')  

# EMAIL_HOST_PASSWORD = 'gpqb dajp fqzc njle'  


# # Application definition

# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'rest_framework',
#     'rest_framework_simplejwt',
#     'Inventory_app',
# ]

# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]


# # settings.py

# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ),
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticated',
#     ),
# }
# # settings.py

# from datetime import timedelta

# REST_USE_JWT = True

# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
# }


ROOT_URLCONF = 'Inventory_Management_System.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [os.path.join(BASE_DIR, 'templates')],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]

# WSGI_APPLICATION = 'Inventory_Management_System.wsgi.application'


# # Database
# # https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# # settings.py

# AUTH_USER_MODEL = 'Inventory_app.RegularUser'

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'Invent_Management_System', 
#         'USER': 'postgres', 
#         'PASSWORD': '123',  
#         'HOST': 'localhost', 
#         'PORT': '5432',  
#     }
# }


# # Password validation
# # https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]


# # Internationalization
# # https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'

# USE_I18N = True

# USE_TZ = True


# STATIC_URL = '/static/'

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# BASE_DIRR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# MEDIA_URL = '/media/'

# # MEDIA_ROOT = os.path.join(BASE_DIRR, 'books', 'media')

# DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'





from pathlib import Path
import os
from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-y-qf4s*g(0lbprj-hp(&jr!^-(3vr697mr=xe6bvu=av&_gb+n'

DEBUG = True

ALLOWED_HOSTS = []

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'charateabhishek3@gmail.com')
EMAIL_HOST_PASSWORD = 'qcol hnrs rgyd fleq'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'Inventory_app',  
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", # React frontend URL
]
# settings.py (Django settings for authentication)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', 
        # 'rest_framework.permissions.AllowAny', 
    ]
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}

AUTH_USER_MODEL = 'Inventory_app.RegularUser'  

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'Invent_Management_System',
#         'USER': 'postgres',
#         'PASSWORD': '123',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }from dotenv import load_dotenv
import os
from dotenv import load_dotenv
import os

# Load environment variables from the .env file
load_dotenv(dotenv_path=os.path.join(BASE_DIR, '.env'))
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'Invent_Management_System'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', '123'),
        'HOST': os.getenv('DB_HOST', 'db'),  # Use 'db' here, as that's the service name in Docker Compose
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}


# Load the .env file from the project root directory
load_dotenv(dotenv_path=os.path.join(BASE_DIR, '.env'))

# Now you can use os.getenv to get values from the .env file


load_dotenv()  # Load the .env file


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # PostgreSQL engine
        'NAME': os.getenv('DB_NAME', 'Invent_Management_System'),  # DB_NAME from .env file
        'USER': os.getenv('DB_USER', 'postgres'),  # DB_USER from .env file
        'PASSWORD': os.getenv('DB_PASSWORD', '123'),  # DB_PASSWORD from .env file
        'HOST': os.getenv('DB_HOST', 'postgres-db'),  # DB_HOST from .env file (service name in docker-compose)
        'PORT': os.getenv('DB_PORT', '5432'),  # DB_PORT from .env file
    }
}






STATICFILES_DIRS = [
    BASE_DIR / 'static',  # Django's static directory
    BASE_DIR / 'inventory-frontend/build/static',  # React's build/static folder
]




AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'

# STATICFILES_DIRS = [
#     BASE_DIR / 'static',  
#     # BASE_DIR / 'frontend/build/static', 
# ]

STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'inventory-frontend/build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'Inventory_Management_System.wsgi.application'

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

BASE_DIRR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

